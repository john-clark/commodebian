#!/bin/bash
# filepath: commodebian/functions/config.sh
# Configuration-related functions

# Make sure this was called from the main script
if [[ -z "$COMMODORE" ]]; then
    echo "This script is not meant to be run directly."
    return 1
fi

# Function to create config file
# This function creates a configuration file for Commodebian
# It initializes the configuration with default values if the file does not exist
# It also checks for the existence of the configuration directory and handles errors accordingly
# Usage: create_config
# Returns 0 on success, 1 on failure
function create_config {

    # check to see if commodebian is already installed
    check_script_installation

    # Check if the directory exists
    if ! [ -d "$(dirname $COMMODEBIAN_CONF)" ]; then
        display_message "Configuration directory does not exist." "$display_output" "error"
        return 1
    fi

    # Check if the config file already exists
    if [ -f $COMMODEBIAN_CONF ]; then
        display_message "Config file already exists." "$display_output" "error"
        # check if the file is readable
        if ! [ -r "$COMMODEBIAN_CONF" ]; then
            display_message "Configuration file is not readable." "$display_output" "error"
            return 1
        fi
        # check if the file is writable
        if ! [ -w "$COMMODEBIAN_CONF" ]; then
            display_message "Configuration file is not writable." "$display_output" "error"
            return 1
        fi
        # check if the file is valid
        if ! bash -n "$COMMODEBIAN_CONF"; then
            display_message "Configuration file contains syntax errors." "$display_output" "error"
            return 1
        fi
        # check if the file is empty
        if [ ! -s "$COMMODEBIAN_CONF" ]; then
            display_message "Configuration file is empty." "$display_output" "error"
            return 1
        fi

        display_message "Loading configuration file..." "$display_output" "info"
        # load the config file
        source $COMMODEBIAN_CONF
        # check if file loaded correctly
        if [ $? -ne 0 ]; then
            display_message "Could not load config file." "$display_output" "error"
            return 1
        fi

        # check if version is set
        if ! [ -z "$VERSION" ]; then
            # found version don't need to recreate
            return 0
        else
            # version not found display error
            display_message "Could not load version from config file." "$display_output" "error"
            return 1
        fi
    fi

    # Check if the file can be created
    if ! run_with_sudo touch "$COMMODEBIAN_CONF"; then
        display_message "Could not create config file." "$display_output" "error"
        return 1
    fi

    # Write the default values to the config file
    echo "Creating configuration file at $COMMODEBIAN_CONF..."
    # Define the configuration lines
    local config_lines=(
        "#!/bin/bash"
        "#Commodebian Configuration File"
        "#This file is automatically generated by the Commodebian script."
        "#Do not edit this file directly. Use the Commodebian script to modify it."
        "VERSION=0.4"
        "#DEFAULT EMULATOR"
        "EMU=$INSTALL_LOCATION/bin/x64"
        "#DEFAULT OPTIONS"
        "OPTS=-sdl2"
        "#DEFAULT ROM"
        "ROM=$INSTALL_LOCATION/share/vice/C64/kernal.rom"
        "#DEFAULT DISK"
        "DISK=$INSTALL_LOCATION/share/vice/C64/blank.d64"
        "#DEFAULT TAPE"
        "TAPE=$INSTALL_LOCATION/share/vice/C64/blank.t64"
        "#DEFAULT CARTRIDGE"
        "CRT=$INSTALL_LOCATION/share/vice/C64/blank.crt"
    )
    # Use the write_file function to write the configuration
    run_with_sudo write_file "$COMMODEBIAN_CONF" config_lines[@]
    [ $? -eq 0 ] && chmod 666 "$COMMODEBIAN_CONF" && display_message "Configuration file created successfully." "$display_output" "success" || { display_message "Could not create config file." "$display_output" "error"; return 1; }

    # Set the file permissions
    run_with_sudo chmod 666 $COMMODEBIAN_CONF
    if [ $? -ne 0 ]; then
        display_message "Failed to set permissions for $COMMODEBIAN_CONF." "$display_output" "error"
        return 1
    fi
}

# Function to check if Commodebian config is installed
# This function checks if the Commodebian configuration file exists and is valid
# It performs several checks including:
# 1. If the script is being run from the correct location
# 2. If the configuration file exists
# 3. If the configuration file is readable and writable
# 4. If the configuration file has valid syntax
# Usage: check_config
# Returns 0 if the configuration file is valid and ready to use
# Returns 1 if any of the checks fail or if the user chooses not to fix the issues
function check_config {

    # Check if the script is being run from the correct location
    check_script_installation

    # Check if the configuration file exists
    if [ ! -f "$COMMODEBIAN_CONF" ]; then
        display_message "Configuration file not found at $COMMODEBIAN_CONF." "$display_output" "error"
        display_message "Would you like to create it?" "$display_output" "yesno"
        if [ $? -eq 0 ]; then
            run_with_sudo create_config
            if [ $? -ne 0 ]; then
                display_message "Failed to create configuration file. Please check permissions." "$display_output" "error"
                return 1
            fi
        else
            display_message "Commodebian is not setup." "$display_output" "error"
            return 1
        fi
    fi

    # Check if the configuration file is readable
    if [ ! -r "$COMMODEBIAN_CONF" ]; then
        display_message "Configuration file at $COMMODEBIAN_CONF is not readable." "$display_output" "error"
        display_message "Would you like to change the permissions?" "$display_output" "yesno"
        if [ $? -eq 0 ]; then
            run_with_sudo chmod 666 "$COMMODEBIAN_CONF"
            if [ $? -ne 0 ]; then
                display_message "Failed to set permissions for $COMMODEBIAN_CONF." "$display_output" "error"
                return 1
            fi
            #display_message "Permissions set for $COMMODEBIAN_CONF." "$display_output" "success"
        else
            return 1
        fi
    fi

    # Check if the configuration file is writable
    if [ ! -w "$COMMODEBIAN_CONF" ]; then
        display_message "Configuration file at $COMMODEBIAN_CONF is not writable." "$display_output" "error"
        display_message "Would you like to change the permissions?" "$display_output" "yesno"
        if [ $? -eq 0 ]; then
            run_with_sudo chmod 666 "$COMMODEBIAN_CONF"
            if [ $? -ne 0 ]; then
                display_message "Failed to set permissions for $COMMODEBIAN_CONF." "$display_output" "error"
                return 1
            fi
            #display_message "Permissions set for $COMMODEBIAN_CONF." "$display_output" "success"
        else
            return 1
        fi
    fi

    # Validate the file's syntax without executing it
    while ! bash -n "$COMMODEBIAN_CONF"; do
        display_message "Configuration file at $COMMODEBIAN_CONF contains syntax errors." "$display_output" "error"
        display_message "Would you like to edit the file?" "$display_output" "yesno"
        if [ $? -eq 0 ]; then
            # Use dialog or nano to edit the file
            if [ "$display_output" = "dialog" ]; then
                dialog --editbox "$COMMODEBIAN_CONF" 0 0 2> "$TEMP_FILE"
                if [ $? -eq 0 ]; then
                    mv "$TEMP_FILE" "$COMMODEBIAN_CONF"
                else
                    display_message "Failed to edit configuration file." "$display_output" "error"
                    return 1
                fi
            else
                nano "$COMMODEBIAN_CONF"
                # Validate the file again
                bash -n "$COMMODEBIAN_CONF"
                if [ $? -ne 0 ]; then
                    display_message "Configuration file contains syntax errors." "$display_output" "error"
                    return 1
                else
                    display_message "Configuration file updated successfully." "$display_output" "success"
                fi
            fi
        else
            # If the user chooses not to edit, exit with an error
            display_message "Please fix the syntax errors in $COMMODEBIAN_CONF." "$display_output" "error"
            return 1
        fi
    done

    # If all checks pass, return success
    display_message "Configuration file is valid and ready to use." "$display_output" "success"
    return 0
}

# function to Load the configuration file
# This function loads the configuration file into the current shell environment
# It first checks if the configuration file is valid using the check_config function
# If the configuration file is valid, it sources the file to load the variables
# Usage: load_config
# Returns 0 on success, 1 on failure
function load_config {

    # Check if the config file exists and is valid
    check_config || return 1

    # Load the configuration file
    source "$COMMODEBIAN_CONF"
    if [ $? -ne 0 ]; then
        display_message "Could not load configuration file." "$display_output" "error"
        return 1
    fi
}

# Function to change configuration variable
# This function changes a variable in the Commodebian configuration file
# It first checks if the configuration file is valid using the check_config function
# It then checks if the variable name and value are provided
# It updates the variable in the configuration file if it exists, or adds it if it doesn't
# Usage: change_config <variable_name> <value>
# Returns 0 on success, 1 on failure
function change_config {

    # Check if the config file exists and is valid
    check_config || return 1

    # Ensure the variable name is provided
    if [ -z "$1" ]; then
        display_message "No variable specified." "$display_output" "error"
        return 1
    fi

    # Ensure the value is provided
    if [ -z "$2" ]; then
        display_message "No value specified." "$display_output" "error"
        return 1
    fi

    # Define variables
    local key="$1"
    local value="$2"
    local escaped_key
    escaped_key=$(printf '%s' "$key" | sed 's/[\/&]/\\&/g')  # Simplified escaping
    local escaped_value
    escaped_value=$(printf '%s' "$value" | sed 's/[\/&]/\\&/g')  # Escape value for sed

    # Check directory permissions
    local config_dir
    config_dir=$(dirname "$COMMODEBIAN_CONF")
    if [ ! -w "$config_dir" ]; then
        display_message "Directory $config_dir is not writable.\nRun with sudo or fix permissions." "$display_output" "error"
        return 1
    fi

    # Check file permissions explicitly
    if [ ! -w "$COMMODEBIAN_CONF" ]; then
        display_message "Config file $COMMODEBIAN_CONF is not writable.\nCheck permissions." "$display_output" "error"
        return 1
    fi

    # Check if the variable exists and update it
    if grep -q "^$escaped_key=" "$COMMODEBIAN_CONF"; then
        sed -i "s|^$escaped_key=.*|$escaped_key=\"$escaped_value\"|" "$COMMODEBIAN_CONF"
        if [ $? -ne 0 ]; then
            display_message "Failed to update $key in $COMMODEBIAN_CONF." "$display_output" "error"
            return 1
        fi
    else
        # Add the variable if it doesn’t exist
        echo "$escaped_key=\"$escaped_value\"" >> "$COMMODEBIAN_CONF"
        if [ $? -ne 0 ]; then
            display_message "Failed to append $key to $COMMODEBIAN_CONF." "$display_output" "error"
            return 1
        fi
    fi

    # Verify the change (more flexible match)
    if grep -q "^$escaped_key=\"[^\"]*\"$" "$COMMODEBIAN_CONF"; then
        display_message "Configuration updated successfully.\n$key set to \"$value\"." "$display_output" "success"
        return 0
    else
        display_message "Could not verify update for $key.\nFile contents:\n$(cat "$COMMODEBIAN_CONF")" "$display_output" "error"
        return 1
    fi
}

# Function to reset the configuration file
# This function resets the Commodebian configuration file by removing it and creating a new one
# It first checks if the configuration file is valid using the check_config function
# It prompts the user for confirmation before resetting the configuration
# Usage: reset_config
# Returns 0 on success, 1 on failure
function reset_config {

    # Check if the config file exists and is valid
    check_config || return 1

    # Prompt for confirmation before resetting
    display_message "Are you sure you want to reset the configuration file? This will delete all current settings." "$display_output" "yesno"
    if [ $? -ne 0 ]; then
        display_message "Resetting configuration aborted." "$display_output" "info"
        return 1
    fi

    # Reset the configuration file by removing it
    run_with_sudo rm -f "$COMMODEBIAN_CONF"
    if [ $? -ne 0 ]; then
        display_message "Failed to reset configuration file." "$display_output" "error"
        return 1
    fi

    # Create a new configuration file
    create_config || return 1

    display_message "Configuration file has been reset successfully." "$display_output" "success"
    return 0
}

# Function to install autostart
# This function sets up autostart for the user by adding specific lines to the user's .profile file
# It first checks if the user is root to avoid modifying the root profile
# It ensures the .profile file exists and adds the necessary lines if they don't already exist
# Usage: install_autostart
# Returns 0 on success, 1 on failure
function install_autostart {

    # Check if the user is root
    if [ "$ROOT" = "true" ]; then
        display_message "Probably not a good idea to install a root profile." "$display_output" "error"
        return 1
    fi
    # Ensure the .profile file exists
    if ! [ -f "$PROFILE_FILE" ]; then
        touch "$PROFILE_FILE"
        if ! [ $? -eq 0 ]; then
            display_message "Could not create $PROFILE_FILE." "$display_output" "error"
            return 1
        fi
    fi

    # Add the lines to .profile if they don't already exist
    for line in "${PROFILE_AUTOSTART_LINES[@]}"; do
        if ! grep -Fxq "$line" "$PROFILE_FILE"; then
            echo "$line" >> "$PROFILE_FILE"
        fi
    done

    # Ensure all lines are written correctly
    for line in "${PROFILE_AUTOSTART_LINES[@]}"; do
        if ! grep -Fxq "$line" "$PROFILE_FILE"; then
            display_message "Failed to write line: $line" "$display_output" "error"
            return 1
        fi
    done
    display_message "Autostart setup completed successfully!" "$display_output" "success"
}

# Function to remove autostart
# This function removes the autostart lines from the user's .profile file
# It first checks if the user is root to avoid modifying the root profile
# It ensures the .profile file exists and removes the specified lines if they do
# Usage: remove_autostart
# Returns 0 on success, 1 on failure
function remove_autostart {

    # Check if the user is root
    if [ "$ROOT" = "true" ]; then
        display_message "Probably not a good idea to remove a root profile." "$display_output" "error"
        return 1
    fi
    # Ensure the .profile file exists
    if ! [ -f "$PROFILE_FILE" ]; then
        display_message "$PROFILE_FILE does not exist." "$display_output" "error"
        return 1
    fi
    # Check if there are any lines to remove
    if [ ${#PROFILE_AUTOSTART_LINES[@]} -eq 0 ]; then
        display_message "No autostart lines to remove." "$display_output" "info"
        return 0
    fi
    # Escape special characters in the lines for sed
    for line in "${PROFILE_AUTOSTART_LINES[@]}"; do
        escaped_line=$(printf '%s\n' "$line" | sed 's/[]\/$*.^[]/\\&/g')
        sed -i "/$escaped_line/d" "$PROFILE_FILE"
    done

    display_message "Autostart removed successfully!" "$display_output" "success"
}

# Function to edit the user profile
# This function allows the user to edit their .profile file using a text editor
# It first checks if the user is root to avoid modifying the root profile
# It ensures the user has the necessary permissions to edit the profile
# It uses the dialog command to display the contents of the .profile file in an edit box
# If the user makes changes and presses OK, it updates the .profile file with the new content
# Usage: edit_profile
# Returns 0 on success, 1 on failure
function edit_profile {

    # Ensure the user is not root
    if [ "$ROOT" = "true" ]; then
        display_message "Editing the profile as root is not allowed." "dialog" "error"
        return 1
    fi
    # Ensure the user has the necessary permissions to edit the profile
    if [ ! -w "$HOME" ]; then
        display_message "You do not have permission to edit your profile." "dialog" "error"
        return 1
    fi
    # Define the profile file
    PROFILE_FILE="$HOME/.profile"
    TEMP_FILE=$(mktemp)

    # Check if the .profile file exists
    if ! [ -f "$PROFILE_FILE" ]; then
        display_message "$PROFILE_FILE does not exist." "dialog" "error"
        return 1
    fi

    # Display the current contents of the .profile file in an editor
    dialog --title "Edit User Profile" --editbox "$PROFILE_FILE" 20 60 2> "$TEMP_FILE"
    RESPONSE=$?

    # Check if the user pressed Cancel or entered an empty input
    if [ $RESPONSE -eq 0 ]; then
        # If user modified and pressed OK, update the file
        cp "$TEMP_FILE" "$PROFILE_FILE"
        dialog --msgbox "User profile updated successfully!" 6 50
    else
        # If the user pressed Cancel, notify them
        dialog --msgbox "No changes were made." 6 50
    fi
}

# Function to enable user autologin
# This function enables autologin for the user on TTY1 by creating a systemd override configuration
# It first checks if the user is root to avoid modifying the root service
# It creates a systemd override configuration for the getty service on TTY1
# It uses the `agetty` command to set up autologin for the specified user
# Usage: enable_user_autologin
# Returns 0 on success, 1 on failure
function enable_user_autologin {

    # Define paths and service
    GETTY_SERVICE="getty@tty1.service"
    OVERRIDE_DIR="/etc/systemd/system/$GETTY_SERVICE.d"
    OVERRIDE_FILE="$OVERRIDE_DIR/autologin.conf"

    # Create override directory if it doesn’t exist
    if [ ! -d "$OVERRIDE_DIR" ]; then
        run_with_sudo mkdir -p "$OVERRIDE_DIR"
        if [ $? -ne 0 ]; then
            display_message "Failed to create directory $OVERRIDE_DIR." "$display_output" "error"
            safe_exit 1
        fi
    fi

    # Define the autologin override configuration lines
    local autologin_lines=(
        "[Service]"
        "ExecStart="
        "ExecStart=-/sbin/agetty --autologin $USER --noclear %I \$TERM"
    )

    # Write the autologin override configuration using the write_file function
    run_with_sudo write_file "$OVERRIDE_FILE" autologin_lines
    if [ $? -ne 0 ]; then
        display_message "Failed to write autologin configuration to $OVERRIDE_FILE." "$display_output" "error"
        safe_exit 1
    fi

    # Reload systemd to apply changes
    run_with_sudo systemctl daemon-reload
    if [ $? -ne 0 ]; then
        display_message "Failed to reload systemd configuration." "$display_output" "error"
        safe_exit 1
    fi

    # Enable the service (optional, usually enabled by default)
    run_with_sudo systemctl enable "$GETTY_SERVICE" 2>/dev/null

    # Inform the user
    display_message "Autologin configured for user '$USER' on TTY1." "$display_output" "success"
}

#function to disable user autologin
# This function disables autologin for the user on TTY1 by removing the systemd override configuration
# It first checks if the override configuration file exists
# It removes the override configuration file if it exists
# It then reloads the systemd configuration to apply the changes
# Usage: disable_user_autologin
# Returns 0 on success, 1 on failure
function disable_user_autologin {

    OVERRIDE_DIR="/etc/systemd/system/$GETTY_SERVICE.d"
    OVERRIDE_FILE="$OVERRIDE_DIR/autologin.conf"

    # Remove the autologin override configuration
    if [ -f "$OVERRIDE_FILE" ]; then
        rm "$OVERRIDE_FILE"
        if [ $? -ne 0 ]; then
            display_message "Failed to remove autologin configuration from $OVERRIDE_FILE." "$display_output" "error"
            safe_exit 1
        fi
    fi
    # Reload systemd to apply changes
    run_with_sudo systemctl daemon-reload
    if [ $? -ne 0 ]; then
        display_message "Failed to reload systemd configuration." "$display_output" "error"
        safe_exit 1
    fi
    # Inform the user
    display_message "Autologin disabled for user '$USER' on TTY1." "$display_output" "success"
}